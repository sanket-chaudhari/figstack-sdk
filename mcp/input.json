{
    "files": [
      {
        "path": "core/scope/resolveScope.ts",
        "content": "import { getFile } from '../figma-api/figma-api.js';\n\nexport async function resolveScope({ fileKey, pageName, nodeId }) {\n  try {\n    const file = await getFile(fileKey, nodeId);\n\n    const result = {\n      fileKey,\n      fileName: file.name,\n      valid: true,\n      diagnostics: {\n        pageFound: false,\n        nodeResolved: false,\n        nodeName: null,\n        nodeType: null\n      }\n    };\n\n    if (pageName) {\n      const matchingPages = file.document?.children?.filter(p => p.name === pageName);\n      if (matchingPages?.length) {\n        result.diagnostics.pageFound = true;\n      } else {\n        result.valid = false;\n        result.error = `Page \"${pageName}\" not found in file \"${file.name}\". Available pages: ` +\n          file.document?.children?.map(p => `\"${p.name}\"`).join(', ');\n        return result;\n      }\n    }\n\n    if (nodeId) {\n      const nodeEntry = file.nodes?.[nodeId]?.document;\n      if (nodeEntry) {\n        result.diagnostics.nodeResolved = true;\n        result.diagnostics.nodeName = nodeEntry.name;\n        result.diagnostics.nodeType = nodeEntry.type;\n      } else {\n        result.valid = false;\n        result.error = `Node ID \"${nodeId}\" not found in file.`;\n        return result;\n      }\n    }\n\n    return result;\n  } catch (err) {\n    return {\n      fileKey,\n      fileName: null,\n      valid: false,\n      error: err.message || 'Unknown error during scope resolution'\n    };\n  }\n}"
      }
    ],
    "commitMessage": "Add core/scope/resolveScope module to centralize file/page/node resolution"
  }
  