{
    "files": [
      {
        "path": "scripts/test-env.ts",
        "content": "import '../scripts/.env.loader.js';\nimport { resolveScope } from '../core/scope/resolveScope.js';\n\nconsole.log('🧪 Environment Diagnostic');\nconsole.log('==========================');\n\nconst token = process.env.FIGMA_PERSONAL_ACCESS_TOKEN;\nconst fileKey = process.env.TEST_FILE_KEY;\nconst pageName = process.env.TEST_PAGE_NAME;\nconst nodeId = process.env.TEST_NODE_ID;\n\nconsole.log('🔐 FIGMA_PERSONAL_ACCESS_TOKEN:', token ? '✅ Present' : '❌ Missing');\n\n(async () => {\n  if (!fileKey) {\n    console.log('📁 TEST_FILE_KEY: ❌ Missing');\n    return;\n  }\n\n  const scopeResult = await resolveScope({ fileKey, pageName, nodeId });\n\n  if (!scopeResult.valid) {\n    console.log(`📂 File Key: ❌ Invalid → ${scopeResult.error}`);\n    return;\n  }\n\n  console.log(`📂 File: ✅ “${scopeResult.fileName}”`);\n\n  if (pageName) {\n    console.log(`📄 Page: ${scopeResult.diagnostics.pageFound ? '✅ Found' : '❌ Not found'}`);\n  }\n\n  if (nodeId) {\n    if (scopeResult.diagnostics.nodeResolved) {\n      console.log(`🔖 Node: ✅ “${scopeResult.diagnostics.nodeName}” [${scopeResult.diagnostics.nodeType}]`);\n    } else {\n      console.log(`🔖 Node: ❌ Could not resolve node ID.`);\n    }\n  }\n})();"
      }
    ],
    "commitMessage": "Update test-env script to use resolveScope and print safe diagnostics"
  }
  