{
    "files": [
      {
        "path": "core/utils/diagnostics.ts",
        "content": "import fs from 'fs-extra';\nimport path from 'path';\nimport { resolveScope } from '../scope/resolveScope.js';\n\nexport async function runDiagnostic(scope, projectFolder) {\n  const logDir = path.join(projectFolder, 'diagnostics');\n  await fs.ensureDir(logDir);\n\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n  const filePath = path.join(logDir, `diag--${timestamp}.txt`);\n\n  const lines = [];\n  const summary = {\n    success: true,\n    issues: [],\n    filePath\n  };\n\n  const token = process.env.FIGMA_PERSONAL_ACCESS_TOKEN;\n  if (!token) {\n    lines.push('❌ FIGMA_PERSONAL_ACCESS_TOKEN is missing');\n    summary.success = false;\n    summary.issues.push('Missing FIGMA_PERSONAL_ACCESS_TOKEN');\n  } else {\n    lines.push('✅ FIGMA_PERSONAL_ACCESS_TOKEN is present');\n  }\n\n  const result = await resolveScope(scope);\n\n  if (!result.valid) {\n    lines.push(`❌ Scope resolution failed: ${result.error}`);\n    summary.success = false;\n    summary.issues.push(result.error);\n  } else {\n    lines.push(`✅ File: ${result.fileName}`);\n    if (scope.pageName) {\n      lines.push(result.diagnostics.pageFound\n        ? `✅ Page \"${scope.pageName}\" found`\n        : `❌ Page \"${scope.pageName}\" not found`);\n    }\n    if (scope.nodeId) {\n      if (result.diagnostics.nodeResolved) {\n        lines.push(`✅ Node ID resolved → \"${result.diagnostics.nodeName}\" [${result.diagnostics.nodeType}]`);\n      } else {\n        lines.push(`❌ Node ID \"${scope.nodeId}\" could not be resolved.`);\n        summary.success = false;\n        summary.issues.push(`Could not resolve node ID: ${scope.nodeId}`);\n      }\n    }\n  }\n\n  const content = [\n    '🧪 Design Infra Diagnostic Log',\n    '==============================',\n    '',\n    ...lines,\n    '',\n    'Logged at: ' + new Date().toLocaleString(),\n  ].join('\\n');\n\n  await fs.writeFile(filePath, content);\n\n  return summary;\n}"
      },
      {
        "path": "scripts/test-env.ts",
        "content": "import '../scripts/.env.loader.js';\nimport { runDiagnostic } from '../core/utils/diagnostics.js';\nimport path from 'path';\n\nconst fileKey = process.env.TEST_FILE_KEY;\nconst pageName = process.env.TEST_PAGE_NAME;\nconst nodeId = process.env.TEST_NODE_ID;\n\n(async () => {\n  console.log('\\n🧪 Running Diagnostic Check...');\n\n  const projectFolder = path.resolve('.');\n  const result = await runDiagnostic({ fileKey, pageName, nodeId }, projectFolder);\n\n  if (result.success) {\n    console.log('✅ All checks passed.');\n  } else {\n    console.log('⚠️  Some checks failed. See log for details.');\n  }\n\n  console.log(`📄 Log written to: ${result.filePath}\\n`);\n})();"
      }
    ],
    "commitMessage": "Add scoped diagnostic module with safe logging under project folder"
  }
  