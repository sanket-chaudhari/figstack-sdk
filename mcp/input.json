{
    "files": [
      {
        "path": "services/snapshot-service/getSnapshot.ts",
        "content": "import { getFile } from '../../core/figma-api/figma-api.js';\n\n/**\n * Safely fetches a scoped snapshot from the Figma API.\n * Requires at least one of: fileKey, teamId, projectId, pageName, frameIds\n */\nexport async function getSnapshot(scope) {\n  if (!scope || typeof scope !== 'object') {\n    throw new Error('[snapshot-service] Missing scope. You must provide a scope object when requesting a snapshot.');\n  }\n\n  const { fileKey, pageName, teamId, projectId, frameIds } = scope;\n\n  if (!fileKey && !teamId && !projectId) {\n    throw new Error('[snapshot-service] Invalid scope: You must provide at least a fileKey, teamId, or projectId.');\n  }\n\n  if (!fileKey) {\n    throw new Error('[snapshot-service] Snapshot fetching for non-file scopes (like team/project) is not yet implemented.');\n  }\n\n  const file = await getFile(fileKey);\n\n  if (pageName) {\n    // Reduce output to just the requested page\n    const matchingPages = file.document.children.filter(p => p.name === pageName);\n    if (matchingPages.length === 0) {\n      throw new Error(`[snapshot-service] Page \"${pageName}\" not found in file: ${file.name}`);\n    }\n    file.document.children = matchingPages;\n  }\n\n  if (frameIds?.length) {\n    for (const page of file.document.children) {\n      page.children = (page.children || []).filter(c => frameIds.includes(c.id));\n    }\n  }\n\n  file.__meta = {\n    snapshotGeneratedAt: new Date().toISOString(),\n    scope: scope\n  };\n\n  return file;\n}"
      }
    ],
    "commitMessage": "Enforce strict scoping in snapshot-service to prevent broad snapshot fetches"
  }
  