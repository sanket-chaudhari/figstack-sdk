{
    "files": [
      {
        "path": "core/utils/parseFigmaUrl.ts",
        "content": "const ALLOWED_PREFIXES = ['/file/', '/design/', '/proto/', '/embed/', '/present/', '/draft/'];\n\nexport function parseFigmaUrl(url: string) {\n  const result = {\n    fileKey: null,\n    nodeId: undefined,\n    pageId: undefined,\n    branchId: undefined,\n    isValid: false,\n    error: undefined\n  };\n\n  try {\n    const urlObj = new URL(url);\n    const [,, prefix, fileKey] = urlObj.pathname.split('/');\n\n    const reconstructed = '/' + prefix + '/';\n\n    if (!ALLOWED_PREFIXES.includes(reconstructed)) {\n      result.error = `Unsupported Figma link pattern: ${reconstructed}\\n\\nWe currently support the following patterns:\\n  ${ALLOWED_PREFIXES.join(', ')}\\n\\nIf you believe this pattern should be supported, feel free to explore our contribution guidelines â€”\\nor reach out to the system maintainer to discuss support for this use case.`;\n      return result;\n    }\n\n    if (!fileKey) {\n      result.error = 'Missing fileKey from path';\n      return result;\n    }\n\n    result.fileKey = fileKey;\n    result.nodeId = urlObj.searchParams.get('node-id') || undefined;\n    result.pageId = urlObj.searchParams.get('page-id') || undefined;\n    result.branchId = urlObj.searchParams.get('branch-id') || undefined;\n    result.isValid = true;\n    return result;\n\n  } catch (err) {\n    result.error = 'Malformed or unsupported URL structure';\n    return result;\n  }\n}"
      }
    ],
    "commitMessage": "Improve Figma URL parsing fallback with helpful, respectful messaging for unsupported patterns"
  }
  