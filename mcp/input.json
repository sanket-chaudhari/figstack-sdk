{
    "files": [
      {
        "path": "scripts/run-health-check.ts",
        "content": "import { getSnapshot } from '../services/snapshot-service/getSnapshot.js';\nimport { compareSnapshotShapes } from '../core/utils/compareSnapshotShapes.js';\nimport { resolveLatestSnapshot } from '../core/utils/resolveLatestSnapshot.js';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport 'dotenv/config';\n\nconst delay = (ms) => new Promise(res => setTimeout(res, ms));\nconst FILE_KEY = process.env.TEST_FILE_KEY;\nconst PAGE_NAME = process.env.TEST_PAGE_NAME || 'Master';\nconst snapshotDir = path.join('plugins', 'demo-mint-component-audit', 'snapshots');\n\n(async () => {\n  console.log('ü©∫ Running Design Infra Health Check...');\n\n  // Step 1: Fetch fresh snapshot\n  await loadingStep('üîç Fetching fresh snapshot', async () => {\n    const fresh = await getSnapshot({ fileKey: FILE_KEY, pageName: PAGE_NAME });\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const safeName = fresh.name.replace(/[^a-zA-Z0-9_-]/g, '-');\n    const freshPath = path.join(snapshotDir, `__temp__snapshot--${safeName}--${timestamp}.json`);\n    await fs.ensureDir(snapshotDir);\n    await fs.writeJson(freshPath, fresh, { spaces: 2 });\n    return freshPath;\n  });\n\n  // Step 2: Compare with last snapshot\n  const freshPath = await findLatestTempFile(snapshotDir);\n  let lastPath = null;\n  let usedFallback = false;\n\n  try {\n    lastPath = await resolveLatestSnapshot(snapshotDir);\n  } catch {\n    usedFallback = true;\n  }\n\n  if (usedFallback) {\n    console.log('\\nüî∞ First-time snapshot. No previous schema to compare. Baseline established.');\n  } else {\n    console.log('\\nüîé Comparing schema with previous snapshot...');\n    await compareSnapshotShapes(lastPath, freshPath);\n  }\n\n  // Step 3: Clean up\n  await fs.remove(freshPath);\n\n  // Final Report\n  console.log('\\nüìÅ File:', FILE_KEY);\n  console.log('üìÑ Page:', PAGE_NAME);\n  console.log('üìÖ Time:', new Date().toLocaleString());\n  console.log('\\n‚úÖ Health check complete.\\n');\n})();\n\nasync function loadingStep(label, task) {\n  process.stdout.write(label);\n  for (let i = 0; i < 3; i++) {\n    await delay(200);\n    process.stdout.write('.');\n  }\n  const result = await task();\n  console.log(' done!');\n  return result;\n}\n\nasync function findLatestTempFile(folder) {\n  const files = await fs.readdir(folder);\n  const temps = files.filter(f => f.startsWith('__temp__snapshot') && f.endsWith('.json'));\n  if (temps.length === 0) throw new Error('No temp snapshot found');\n  return path.join(folder, temps.sort().reverse()[0]);\n}"
      }
    ],
    "commitMessage": "Add run-health-check script to validate Figma schema and system status"
  }
  