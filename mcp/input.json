{
    "files": [
      {
        "path": "plugins/demo-mint-component-audit/generate-report.ts",
        "content": "import { getFile } from '../../core/figma-api/figma-api.js';\nimport { getPagesInFile, getTopLevelFramesInPage } from '../../core/traversal/traversal.js';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport 'dotenv/config';\n\nconst FILE_KEY = process.env.TEST_FILE_KEY;\nconst OUTPUT_PATH = path.join('plugins', 'demo-mint-component-audit', 'reports', 'report.txt');\n\n(async () => {\n  if (!FILE_KEY) {\n    console.error('❌ TEST_FILE_KEY missing in .env');\n    process.exit(1);\n  }\n\n  const file = await getFile(FILE_KEY);\n  const componentsById = file.components || {};\n  const pages = getPagesInFile(file);\n\n  const componentDefs = new Map();\n  const variantUsage = new Map();\n  const instanceUsage: string[] = [];\n\n  // 1. Scan component definitions from file.document\n  const componentPages = file.document.children.filter(n => n.type === 'CANVAS');\n  for (const page of componentPages) {\n    for (const node of page.children || []) {\n      if (node.type === 'COMPONENT_SET' || node.type === 'COMPONENT') {\n        componentDefs.set(node.id, node);\n      }\n    }\n  }\n\n  // 2. Traverse all frames for instances\n  for (const page of pages) {\n    const frames = getTopLevelFramesInPage(page);\n    for (const frame of frames) {\n      const walk = (node, pathLabel) => {\n        if (node.type === 'INSTANCE') {\n          const componentId = node.componentId;\n          const resolvedName = componentsById[componentId]?.name || '[Unknown]';\n          const variants = node.componentProperties || {};\n          const variantString = Object.entries(variants)\n            .map(([key, val]) => `${key}=${val.value}`)\n            .join(', ');\n\n          instanceUsage.push(`📄 ${page.name} / 🖼 ${frame.name} → ${resolvedName} [${variantString}]`);\n\n          for (const [k, v] of Object.entries(variants)) {\n            const key = `${resolvedName}::${k}=${v.value}`;\n            variantUsage.set(key, (variantUsage.get(key) || 0) + 1);\n          }\n        }\n        (node.children || []).forEach(child => walk(child, pathLabel));\n      };\n      walk(frame, `${page.name} / ${frame.name}`);\n    }\n  }\n\n  // 3. Format report\n  let report = '';\n  report += '📘 Figma System Usage Report\\n';\n  report += '============================\\n\\n';\n\n  report += '📦 Components Defined in File:\\n';\n  report += '------------------------------\\n';\n  if (componentDefs.size === 0) report += '(none found)\\n';\n  else {\n    for (const [id, node] of componentDefs) {\n      report += `- ${node.name} (type: ${node.type})\\n`;\n    }\n  }\n\n  report += '\\n🔍 Instance Usage:\\n';\n  report += '------------------\\n';\n  if (instanceUsage.length === 0) report += '(no component instances found)\\n';\n  else report += instanceUsage.join('\\n') + '\\n';\n\n  report += '\\n🧬 Variant Usage Summary:\\n';\n  report += '--------------------------\\n';\n  if (variantUsage.size === 0) report += '(no variant data found)\\n';\n  else {\n    for (const [key, count] of variantUsage) {\n      report += `- ${key} → ${count} use(s)\\n`;\n    }\n  }\n\n  // 4. Write to file\n  await fs.ensureDir(path.dirname(OUTPUT_PATH));\n  await fs.writeFile(OUTPUT_PATH, report);\n  console.log(`\\n✅ Report written to: ${OUTPUT_PATH}\\n`);\n})();"
      }
    ],
    "commitMessage": "Add demo report generator to output .txt summary of component usage and variants"
  }
  