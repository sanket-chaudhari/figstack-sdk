{
    "files": [
      {
        "path": "services/snapshot-service/CHANGELOG.md",
        "content": "# ðŸ“¦ Snapshot Service Changelog\n\nThis changelog tracks meaningful changes to the snapshot-service logic, structure, and output format.\n\n---\n\n## [Unreleased]\n- Added `__meta.apiVersion` to all snapshot files\n- Enforced required scope on all snapshot requests\n- Planned support for multipart snapshots and `.meta.json`\n\n---\n\n## [0.1.0] - Initial Stable\n- Created `getSnapshot()` service with required scope validation\n- Supports `fileKey`, `pageName`, `frameIds`\n- Writes structured `.json` output via plugins/services\n"
      },
      {
        "path": "core/utils/compareSnapshotShapes.ts",
        "content": "import fs from 'fs-extra';\n\nfunction getShape(obj, prefix = '') {\n  const shape = {};\n  for (const key in obj) {\n    const fullKey = prefix ? `${prefix}.${key}` : key;\n    if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {\n      Object.assign(shape, getShape(obj[key], fullKey));\n    } else {\n      shape[fullKey] = typeof obj[key];\n    }\n  }\n  return shape;\n}\n\nexport async function compareSnapshotShapes(pathA, pathB) {\n  const a = await fs.readJson(pathA);\n  const b = await fs.readJson(pathB);\n  const shapeA = getShape(a);\n  const shapeB = getShape(b);\n\n  const keysA = Object.keys(shapeA);\n  const keysB = Object.keys(shapeB);\n\n  const added = keysB.filter(k => !keysA.includes(k));\n  const removed = keysA.filter(k => !keysB.includes(k));\n  const changed = keysA.filter(k => keysB.includes(k) && shapeA[k] !== shapeB[k]);\n\n  console.log('ðŸ§  Snapshot Shape Diff Report');\n  console.log('=============================');\n  if (added.length) console.log('\\nâž• Keys Added:', added);\n  if (removed.length) console.log('\\nâž– Keys Removed:', removed);\n  if (changed.length) console.log('\\nðŸ”„ Type Changes:', changed);\n  if (!added.length && !removed.length && !changed.length) {\n    console.log('âœ… No schema drift detected.');\n  }\n}"
      },
      {
        "path": "services/snapshot-service/getSnapshot.ts",
        "content": "import { getFile } from '../../core/figma-api/figma-api.js';\n\nexport async function getSnapshot(scope) {\n  if (!scope || typeof scope !== 'object') {\n    throw new Error('[snapshot-service] Missing scope. You must provide a scope object when requesting a snapshot.');\n  }\n\n  const { fileKey, pageName, teamId, projectId, frameIds } = scope;\n\n  if (!fileKey && !teamId && !projectId) {\n    throw new Error('[snapshot-service] Invalid scope: You must provide at least a fileKey, teamId, or projectId.');\n  }\n\n  if (!fileKey) {\n    throw new Error('[snapshot-service] Snapshot fetching for non-file scopes (like team/project) is not yet implemented.');\n  }\n\n  const file = await getFile(fileKey);\n\n  if (pageName) {\n    const matchingPages = file.document.children.filter(p => p.name === pageName);\n    if (matchingPages.length === 0) {\n      throw new Error(`[snapshot-service] Page \"${pageName}\" not found in file: ${file.name}`);\n    }\n    file.document.children = matchingPages;\n  }\n\n  if (frameIds?.length) {\n    for (const page of file.document.children) {\n      page.children = (page.children || []).filter(c => frameIds.includes(c.id));\n    }\n  }\n\n  file.__meta = {\n    snapshotGeneratedAt: new Date().toISOString(),\n    scope,\n    figmaApiVersion: 'unknown'\n  };\n\n  return file;\n}"
      }
    ],
    "commitMessage": "Add compareSnapshotShapes utility, snapshot metadata, and changelog starter"
  }
  