{
    "files": [
      {
        "path": "plugins/demo-mint-component-audit/index.ts",
        "content": "import { getFile } from '../../core/figma-api/figma-api.js';\nimport { getPagesInFile, getTopLevelFramesInPage } from '../../core/traversal/traversal.js';\nimport { scanMintInstancesInFrame } from './analyze.js';\nimport 'dotenv/config';\n\nconst FILE_KEY = process.env.TEST_FILE_KEY;\n\n(async () => {\n  if (!FILE_KEY) {\n    console.error('‚ùå TEST_FILE_KEY missing in .env');\n    process.exit(1);\n  }\n\n  try {\n    const file = await getFile(FILE_KEY);\n    const pages = getPagesInFile(file);\n\n    console.log(`‚úÖ Analyzing ${pages.length} page(s)...\\n`);\n\n    for (const page of pages) {\n      const frames = getTopLevelFramesInPage(page);\n      console.log(`üìÑ Page: ${page.name} ‚Üí ${frames.length} frame(s)`);\n\n      for (const frame of frames) {\n        const report = scanMintInstancesInFrame(frame);\n        console.log(`  üñº Frame: ${frame.name}`);\n\n        if (report.length === 0) {\n          console.log('    ‚ö†Ô∏è  No Mint components found.');\n        } else {\n          const summary = report.reduce((acc, item) => {\n            acc[item.componentName] = (acc[item.componentName] || 0) + 1;\n            return acc;\n          }, {});\n\n          for (const [name, count] of Object.entries(summary)) {\n            console.log(`    ‚úÖ ${name} √ó ${count}`);\n          }\n        }\n      }\n    }\n  } catch (err) {\n    console.error('‚ùå Error in plugin:', err);\n  }\n})();"
      },
      {
        "path": "plugins/demo-mint-component-audit/analyze.ts",
        "content": "import { isMintInstance } from './helpers.js';\n\nexport function scanMintInstancesInFrame(frameNode) {\n  const results = [];\n\n  function walk(node) {\n    if (isMintInstance(node)) {\n      results.push({\n        id: node.id,\n        name: node.name,\n        componentName: node.componentName || '[Unnamed]'\n      });\n    }\n\n    if (node.children && Array.isArray(node.children)) {\n      node.children.forEach(walk);\n    }\n  }\n\n  walk(frameNode);\n  return results;\n}"
      },
      {
        "path": "plugins/demo-mint-component-audit/helpers.ts",
        "content": "export function isMintInstance(node) {\n  return (\n    node.type === 'INSTANCE' &&\n    typeof node.componentName === 'string' &&\n    node.componentName.toLowerCase().includes('mint')\n  );\n}"
      }
    ],
    "commitMessage": "[Milestone] Scaffold demo-mint-component-audit plugin to scan Mint component usage"
  }
  