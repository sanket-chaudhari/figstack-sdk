{
    "files": [
      {
        "path": "scripts/parse-url.ts",
        "content": "import '../scripts/.env.loader.js';\nimport { parseFigmaUrl } from '../core/utils/parseFigmaUrl.js';\nimport { resolveScope } from '../core/scope/resolveScope.js';\n\nconst inputUrl = process.argv[2];\nconst shouldResolve = process.argv.includes('--resolve');\n\nif (!inputUrl) {\n  console.error('‚ùå Please provide a Figma URL as an argument.');\n  process.exit(1);\n}\n\nconsole.log('üì¶ Parsed URL:');\nconst parsed = parseFigmaUrl(inputUrl);\n\nif (!parsed.isValid) {\n  console.error(`‚ùå Invalid Figma URL ‚Üí ${parsed.error}`);\n  process.exit(1);\n}\n\nconsole.log(`‚Ä¢ fileKey: ${parsed.fileKey}`);\nif (parsed.nodeId) console.log(`‚Ä¢ nodeId: ${parsed.nodeId}`);\nif (parsed.pageId) console.log(`‚Ä¢ pageId: ${parsed.pageId}`);\nif (parsed.branchId) console.log(`‚Ä¢ branchId: ${parsed.branchId}`);\n\nif (shouldResolve) {\n  console.log('\\nüîç Resolving from Figma...');\n\n  const scope = {\n    fileKey: parsed.fileKey,\n    nodeId: parsed.nodeId\n  };\n\n  resolveScope(scope).then(res => {\n    if (!res.valid) {\n      console.log(`‚ùå Resolution failed: ${res.error}`);\n    } else {\n      console.log(`‚Ä¢ File name: ‚Äú${res.fileName}‚Äù`);\n      if (res.diagnostics.nodeResolved) {\n        console.log(`‚Ä¢ Node: ‚Äú${res.diagnostics.nodeName}‚Äù [${res.diagnostics.nodeType}]`);\n      }\n    }\n  }).catch(err => {\n    console.error('‚ùå Error during resolution:', err.message);\n  });\n}"
      }
    ],
    "commitMessage": "Add CLI tool to parse and optionally resolve Figma URLs"
  }
  