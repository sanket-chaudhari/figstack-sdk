{
    "files": [
      {
        "path": "core/figma-api/figma-api.ts",
        "content": "import 'dotenv/config';\n\nexport async function getFile(fileKey: string, nodeId?: string) {\n  const FIGMA_TOKEN = process.env.FIGMA_TOKEN;\n  if (!FIGMA_TOKEN) throw new Error('[figma-api] Missing FIGMA_TOKEN');\n\n  const url = nodeId\n    ? `https://api.figma.com/v1/files/${fileKey}?ids=${encodeURIComponent(nodeId)}`\n    : `https://api.figma.com/v1/files/${fileKey}`;\n\n  const res = await fetch(url, {\n    headers: {\n      'X-Figma-Token': FIGMA_TOKEN,\n    },\n  });\n\n  if (!res.ok) {\n    throw new Error(`[figma-api] Failed to fetch file data: ${res.status}`);\n  }\n\n  return await res.json();\n}"
      },
      {
        "path": "services/snapshot-service/getSnapshot.ts",
        "content": "import { getFile } from '../../core/figma-api/figma-api.js';\n\nexport async function getSnapshot(scope) {\n  if (!scope || typeof scope !== 'object') {\n    throw new Error('[snapshot-service] Missing scope. You must provide a scope object when requesting a snapshot.');\n  }\n\n  const { fileKey, pageName, teamId, projectId, frameIds, nodeId } = scope;\n\n  if (!fileKey && !teamId && !projectId) {\n    throw new Error('[snapshot-service] Invalid scope: You must provide at least a fileKey, teamId, or projectId.');\n  }\n\n  if (!fileKey) {\n    throw new Error('[snapshot-service] Snapshot fetching for non-file scopes (like team/project) is not yet implemented.');\n  }\n\n  const file = await getFile(fileKey, nodeId);\n\n  if (pageName) {\n    const matchingPages = file.document.children.filter(p => p.name === pageName);\n    if (matchingPages.length === 0) {\n      const available = file.document.children.map(p => `\"${p.name}\"`).join(', ');\n      throw new Error(`[snapshot-service] Page \"${pageName}\" not found in file: ${file.name}. Available: ${available}`);\n    }\n    file.document.children = matchingPages;\n  }\n\n  if (frameIds?.length) {\n    for (const page of file.document.children) {\n      page.children = (page.children || []).filter(c => frameIds.includes(c.id));\n    }\n  }\n\n  file.__meta = {\n    snapshotGeneratedAt: new Date().toISOString(),\n    scope,\n    figmaApiVersion: 'unknown'\n  };\n\n  return file;\n}"
      },
      {
        "path": "scripts/run-health-check.ts",
        "content": "import { getSnapshot } from '../services/snapshot-service/getSnapshot.js';\nimport { compareSnapshotShapes } from '../core/utils/compareSnapshotShapes.js';\nimport { resolveLatestSnapshot } from '../core/utils/resolveLatestSnapshot.js';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport 'dotenv/config';\n\nconst delay = (ms) => new Promise(res => setTimeout(res, ms));\nconst FILE_KEY = process.env.TEST_FILE_KEY;\nconst PAGE_NAME = process.env.TEST_PAGE_NAME || 'Master';\nconst NODE_ID = process.env.TEST_NODE_ID;\nconst snapshotDir = path.join('plugins', 'demo-mint-component-audit', 'snapshots');\n\n(async () => {\n  console.log('ü©∫ Running Design Infra Health Check...');\n\n  // Step 1: Fetch fresh snapshot\n  const freshPath = await loadingStep('üîç Fetching fresh snapshot', async () => {\n    const fresh = await getSnapshot({ fileKey: FILE_KEY, pageName: PAGE_NAME, nodeId: NODE_ID });\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const safeName = fresh.name.replace(/[^a-zA-Z0-9_-]/g, '-');\n    const tempPath = path.join(snapshotDir, `__temp__snapshot--${safeName}--${timestamp}.json`);\n    await fs.ensureDir(snapshotDir);\n    await fs.writeJson(tempPath, fresh, { spaces: 2 });\n    return tempPath;\n  });\n\n  // Step 2: Compare with last snapshot\n  let lastPath = null;\n  let usedFallback = false;\n\n  try {\n    lastPath = await resolveLatestSnapshot(snapshotDir);\n  } catch {\n    usedFallback = true;\n  }\n\n  if (usedFallback) {\n    console.log('\\nüî∞ First-time snapshot. No previous schema to compare. Baseline established.');\n  } else {\n    console.log('\\nüîé Comparing schema with previous snapshot...');\n    await compareSnapshotShapes(lastPath, freshPath);\n  }\n\n  // Step 3: Clean up\n  await fs.remove(freshPath);\n\n  // Final Report\n  console.log('\\nüìÅ File Key:', FILE_KEY);\n  console.log('üìÑ Page Name:', PAGE_NAME);\n  console.log('üîñ Node ID:', NODE_ID || '(not scoped)');\n  console.log('üìÖ Time:', new Date().toLocaleString());\n  console.log('\\n‚úÖ Health check complete.\\n');\n})();\n\nasync function loadingStep(label, task) {\n  process.stdout.write(label);\n  for (let i = 0; i < 3; i++) {\n    await delay(200);\n    process.stdout.write('.');\n  }\n  const result = await task();\n  console.log(' done!');\n  return result;\n}\n\nasync function findLatestTempFile(folder) {\n  const files = await fs.readdir(folder);\n  const temps = files.filter(f => f.startsWith('__temp__snapshot') && f.endsWith('.json'));\n  if (temps.length === 0) throw new Error('No temp snapshot found');\n  return path.join(folder, temps.sort().reverse()[0]);\n}"
      }
    ],
    "commitMessage": "Support nodeId scoping in getSnapshot and run-health-check for large Figma files"
  }
  